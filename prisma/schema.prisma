// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Niveau {
  id      String  @id @default(cuid())
  handler String  @unique // short readable identifier (e.g. "fractions-course")
  name    String // "Primaire", "CollÃ¨ge", "LycÃ©e"
  grades  Grade[]
}

model CourseProgress {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  completed   Boolean   @default(false)
  completedAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // One record per user/course
}

model Grade {
  id       String    @id @default(cuid())
  handler  String    @unique // short readable identifier (e.g. "fractions-course")
  name     String // "CE1", "2AC", "1Bac"...
  niveauId String
  niveau   Niveau    @relation(fields: [niveauId], references: [id], onDelete: Cascade)
  users    User[]
  subjects Subject[]
}

model Subject {
  id          String   @id @default(cuid())
  handler     String   @unique // short readable identifier (e.g. "fractions-course")
  name        String
  description String?
  color       String
  gradeId     String
  grade       Grade    @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  courses     Course[]
}

model Course {
  id         String           @id @default(cuid())
  title      String
  content    String? // description or summary
  videoUrl   String? // Video (optional)
  coverImage String? // Cover image (optional)
  handler    String           @unique // short readable identifier (e.g. "fractions-course")
  index      Int // order of the course in a subject
  subjectId  String
  subject    Subject          @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  documents  Document[]
  quizzes    Quiz[]
  progress   CourseProgress[]
  createdAt        DateTime  @default(now())
  @@index([index])
}

model Document {
  id       String @id @default(cuid())
  name     String
  url      String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Quiz {
  id        String     @id @default(cuid())
  title     String
  courseId  String
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]
  quizResult     QuizResult[]
}

model Question {
  id      String @id @default(cuid())
  content String
  answer  String
  quizId  String
  quiz    Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
   options Option[] // New relation
}
model Option {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
model QuizResult {
  id             String   @id @default(cuid())
  quizId         String
  userId         String
  score          Int
  totalQuestions Int
  percentage     Int
  completedAt    DateTime @default(now())
  attempts       Int

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}


model RegisterCode {
  id        String    @id @default(cuid())
  code      String    @unique
  isUsed    Boolean   @default(false) // statut: consommÃ© or not
  createdAt DateTime  @default(now())
  usedAt    DateTime? // when the code was consumed
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @unique // One user can be linked to one code
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  archive          Boolean   @default(false)
  createdAt        DateTime  @default(now())
  emailVerified    DateTime?
  image            String?
  step             Int       @default(0)
  phone            Int?
  age              Int?
  totalTimeSpent   Int? @default(0) // Total time spent on the platform in seconds
  password         String?
  prenom           String?
  qrSecret         String?
  role             Role      @default(USER)
  statut           Boolean   @default(true)
  StatutUser       StatutUser @default(awaiting)
  twoFactorEnabled Boolean   @default(true)
  twoFactorSecret  String?
  updatedAt        DateTime  @updatedAt
  username         String    @unique
  verified_email   String?

  // Relations
  gradeId        String?
  grade          Grade?           @relation(fields: [gradeId], references: [id])
  registerCode   RegisterCode?
  courseProgress CourseProgress[] // ðŸ‘ˆ Progress relation
  accounts       Account[]
  quizResult     QuizResult[]
  Authenticator  Authenticator[]
  sessions       Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Role {
  USER
  ADMIN
}
enum StatutUser {
  subscribed
  awaiting
  verified
}
