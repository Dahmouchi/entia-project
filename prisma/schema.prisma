// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model RegisterCode {
  id         String   @id @default(cuid())
  code       String   @unique
  isUsed     Boolean  @default(false) // statut: consomm√© or not
  createdAt  DateTime @default(now())
  usedAt     DateTime? // when the code was consumed
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @unique // One user can be linked to one code
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  archive          Boolean         @default(false)
  createdAt        DateTime        @default(now())
  emailVerified    DateTime?
  image            String?
  step             Int             @default(0)
  phone            Int?
  age              Int?
  password         String?
  prenom           String?
  qrSecret         String?
  role             Role            @default(USER)
  statut           Boolean         @default(true)
  twoFactorEnabled Boolean         @default(true)
  twoFactorSecret  String?
  updatedAt        DateTime        @updatedAt
  username         String          @unique
  verified_email   String?
  registerCode     RegisterCode?
  accounts         Account[]
  Authenticator    Authenticator[]
  sessions         Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Role {
  USER
  ADMIN
}
